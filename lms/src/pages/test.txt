import React, { useEffect, useState } from "react";
import axios from "axios";
import { FaRegCheckCircle, FaArrowLeft, FaLink } from "react-icons/fa";

export default function Assignment({ batchId, userId }) {
  const API_URL = import.meta.env.VITE_API_URL;
  const [assignments, setAssignments] = useState([]);
  const [selected, setSelected] = useState(null);
  const [fileUrl, setFileUrl] = useState("");
  const [hasSubmitted, setHasSubmitted] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  // Fetch assignments for this batch
  useEffect(() => {
    if (!batchId) return;
    axios.get(`${API_URL}/assignments?batchId=${batchId}`)
      .then(res => setAssignments(res.data || []));
  }, [API_URL, batchId]);

  // Check if user submitted for this assignment
  useEffect(() => {
    if (!selected) return;
    axios
      .get(`${API_URL}/submissions?assignmentId=${selected.id}&userId=${userId}`)
      .then(res => setHasSubmitted((res.data || []).length > 0));
  }, [selected, userId, API_URL]);

  const handleSubmit = async e => {
    e.preventDefault();
    setSubmitting(true);
    await axios.post(`${API_URL}/submissions`, {
      userId,
      assignmentId: selected.id,
      batchId,
      fileUrl,
      submittedDate: new Date().toISOString()
    });
    setHasSubmitted(true);
    setSubmitting(false);
    setSelected(null);
    setFileUrl("");
    // Use a toast/snackbar in real app‚Äîhere use alert for feedback
    alert("üéâ Assignment submitted successfully!");
  };

  if (!assignments.length) {
    return (
      <div className="flex flex-col items-center justify-center mt-20">
        <img src="https://undraw.co/api/illustrations/empty?color=gray" alt="No assignments" className="w-32 h-32 mb-4 opacity-80" />
        <div className="text-gray-500 text-lg text-center">No assignments for this batch yet.<br />Please check back soon.</div>
      </div>
    );
  }

  if (selected) {
    return (
      <div className="max-w-2xl mx-auto bg-white rounded-2xl shadow-2xl border mt-14 p-7 relative animate-fadeIn">
        <button
          className="flex items-center gap-2 mb-5 text-blue-700 hover:text-blue-900 hover:underline absolute left-4 top-4 transition"
          onClick={() => setSelected(null)}>
          <FaArrowLeft /> <span>Back</span>
        </button>
        <div className="pl-8 mt-4"> {/* Avoid being covered by abs button */}
          <h2 className="text-3xl font-bold mb-2">{selected.courseName}</h2>
          <p className="mb-2 text-gray-700">{selected.description}</p>
          <div className="mb-2 text-sm">
            <span className="font-semibold text-blue-800">Due:</span> {selected.dueDate}
          </div>
          {hasSubmitted ? (
            <div className="text-green-600 flex items-center gap-2 mt-6 text-lg font-medium drop-shadow animate-bounceIn">
              <FaRegCheckCircle className="text-2xl" /> You have already submitted!
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="mt-6">
              <label className="block mb-3 font-semibold" htmlFor="gdrive">
                <FaLink className="inline mr-2" />Upload Google Drive link
              </label>
              <input
                type="url"
                id="gdrive"
                value={fileUrl}
                onChange={e => setFileUrl(e.target.value)}
                className="border focus:border-blue-400 rounded-lg w-full px-4 py-2 mb-4 focus:ring-2 focus:ring-blue-200 transition"
                placeholder="https://drive.google.com/..."
                required
                autoFocus
              />
              <button
                type="submit"
                disabled={submitting || !fileUrl}
                className={`w-full bg-gradient-to-r from-blue-700 to-blue-500 text-white px-6 py-2 mt-3 rounded-lg font-bold hover:from-blue-900 hover:to-blue-700 transition shadow-lg ${
                  submitting ? "opacity-60 cursor-not-allowed" : ""
                }`}
              >
                {submitting ? "‚è≥ Submitting..." : "üöÄ Submit Assignment"}
              </button>
            </form>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="grid sm:grid-cols-2 gap-7 px-2 max-w-4xl mx-auto mt-12 animate-fadeIn">
      {assignments.map(a => (
        <div
          key={a.id}
          className="bg-white rounded-2xl shadow-xl p-6 border  hover:border-blue-700  hover:shadow-2xl cursor-pointer group transition-all duration-300 relative flex flex-col"
          onClick={() => setSelected(a)}
        >
          <div className="h-12 flex items-center text-xl font-bold text-blue-900 group-hover:underline group-hover:text-blue-700">
            {a.title}
          </div>
          <div className="text-gray-700 mt-2 line-clamp-2 min-h-[2.5rem]">{a.description}</div>
          <div className="flex items-center justify-between mt-auto pt-7">
            <div className="text-sm text-gray-600 font-medium">
              Due: <span className="font-bold">{a.dueDate}</span>
            </div>
            <button
              className="bg-blue-50 text-blue-700 px-4 py-1 rounded-lg group-hover:bg-blue-700 group-hover:text-white transition border border-blue-700 group-hover:border-blue-900 shadow group-hover:shadow-md font-semibold"
              tabIndex={-1}
            >
              View & Submit
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}

// --- Optional: add Tailwind animate-fadeIn and animate-bounceIn in your tailwind.config for those effects
